<!DOCTYPE html>
<html lang="en-US">
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>

<p>So what you think is an expression outside of ng-app div, will not evaluate as expression it will be displayed as is.<br>
Example: {{ 5 + 5 }}</p>


<div ng-app="myApp" ng-init="name='cat'; namebb='dog'; namecc='pig'; myCol='lightblue'; person={first:'John',last:'Doe'}; points=[1,15,19,2,40]; peep=[{name:'Jani',country:'Norway'},{name:'Hege',country:'Sweden'},{name:'Kai',country:'Denmark'}]" ng-controller="myCtrl">
   <p>examples use ng-model inside input textboxes</p>
   <br>

   <p>Example using double curly braces called expressions</p>
   <p>name : <input type="text" ng-model="name"></p>
   <h1>name = {{name}}</h1>
   <br>

   <p>Example using ng-bind</p>
   <p>namebb : <input type="text" ng-model="namebb"></p>
   <h1>namebb = <span ng-bind="namebb"></span></h1>
   <br>

   <p>You can use data-ng- instead of ng- if you want to make your page HTML valid</p>
   <p>namecc : <input type="text" data-ng-model="namecc"></p>
   <h1>namecc = <span data-ng-bind="namecc"></span></h1>
   <br>

   <p>Example using expression in CSS property</p>
   <input style="background-color:{{myCol}}" ng-model="myCol" value="{{myCol}}">
   <br>
   <br>
   <br>

   <p>Example of email validation</p>
   <form name="myForm">
    Email: <input type="email" name="myAddress" ng-model="text">
    <span ng-show="myForm.myAddress.$error.email">Not a valid e-mail address</span>
    </form>

   <p>Example using objects</p>
   <p>The ng-init initialized last of person is {{person.last }}</p>
   <br>
   <br>
   <br>

   <p>Example using arrays</p>
   <p>The 3rd result of points is {{points[2] }}</p>
   <br>
   <br>
   <br>


   <p>First example using module and controller</p>
   firstName: <input type="text" ng-model="firstName"><br>
   lastName: <input type="text" ng-model="lastName"><br>
   full name: {{firstName + " " + lastName}}
   <br>
   <br>
   <br>

   <p>examples of custom-made directives</p>
   <p w3-test-directive></p>
   <p how-does-this-work></p>
   <my-other-test-thing></my-other-test-thing>
   <p class="my-class-example"></p>
   <!-- directive: my-comment-example -->
   <br>
   <br>
   <br>

   <p>example using numbers</p>
   Quantity: <input type="number" ng-model="quantity">
   Price: <input type="number" ng-model="price">
   <p><b>Total in dollar:</b> {{quantity * price}}</p>
   <br>
   <br>
   <br> 

   <p>Looping with ng-repeat:</p>
   <ul>
    <li ng-repeat="x in points">
      {{ x }}
    </li>
   </ul>


   <p>Looping with objects:</p>
   <ul>
    <li ng-repeat="x in peep">
      {{ x.name + ', ' + x.country }}</li>
   </ul>

</div>

<script>
var app = angular.module('myApp', []);

app.controller('myCtrl', function($scope) {
     $scope.firstName="John";
     $scope.lastName="Doe";
});

app.directive("w3TestDirective", function() {
     return {
         template : "This is made in a directive constructor! The default restrict is EA which means elements and attributes can invoke the directive"
     };
});

app.directive("howDoesThisWork", function() {
     return {
         template : "This is an example of directive in an attribute!"
     };
});

app.directive("myOtherTestThing", function() {
     return {
         template : "<h1>This is example of yet another directive in an element name!</h1>"
     };
});

app.directive("myClassExample", function() {
     return {
         restrict : "C",
         template : "<h1>you must add the C to the restrict property to invok the directive from a class name</h1>"
     };
});

app.directive("myCommentExample", function() {
     return {
         restrict : "M",
         replace  : true,
         template : "<h1>M is to invoke directive from comment and replace is so comment is visible</h1>"
     };
});

</script>

    
</body>
</html>
